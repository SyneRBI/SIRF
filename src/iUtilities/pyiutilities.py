# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyiutilities', [dirname(__file__)])
        except ImportError:
            import _pyiutilities
            return _pyiutilities
        if fp is not None:
            try:
                _mod = imp.load_module('_pyiutilities', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyiutilities = swig_import_helper()
    del swig_import_helper
else:
    import _pyiutilities
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def newDataHandle():
    return _pyiutilities.newDataHandle()
newDataHandle = _pyiutilities.newDataHandle

def deleteDataHandle(ptr):
    return _pyiutilities.deleteDataHandle(ptr)
deleteDataHandle = _pyiutilities.deleteDataHandle

def charDataHandle(s):
    return _pyiutilities.charDataHandle(s)
charDataHandle = _pyiutilities.charDataHandle

def intDataHandle(i):
    return _pyiutilities.intDataHandle(i)
intDataHandle = _pyiutilities.intDataHandle

def floatDataHandle(i):
    return _pyiutilities.floatDataHandle(i)
floatDataHandle = _pyiutilities.floatDataHandle

def doubleDataHandle(i):
    return _pyiutilities.doubleDataHandle(i)
doubleDataHandle = _pyiutilities.doubleDataHandle

def charDataFromHandle(ptr):
    return _pyiutilities.charDataFromHandle(ptr)
charDataFromHandle = _pyiutilities.charDataFromHandle

def intDataFromHandle(ptr):
    return _pyiutilities.intDataFromHandle(ptr)
intDataFromHandle = _pyiutilities.intDataFromHandle

def intDataItemFromHandle(ptr, i):
    return _pyiutilities.intDataItemFromHandle(ptr, i)
intDataItemFromHandle = _pyiutilities.intDataItemFromHandle

def uint16DataItemFromHandle(ptr, i):
    return _pyiutilities.uint16DataItemFromHandle(ptr, i)
uint16DataItemFromHandle = _pyiutilities.uint16DataItemFromHandle

def uint32DataItemFromHandle(ptr, i):
    return _pyiutilities.uint32DataItemFromHandle(ptr, i)
uint32DataItemFromHandle = _pyiutilities.uint32DataItemFromHandle

def uint64DataItemFromHandle(ptr, i):
    return _pyiutilities.uint64DataItemFromHandle(ptr, i)
uint64DataItemFromHandle = _pyiutilities.uint64DataItemFromHandle

def floatDataFromHandle(ptr):
    return _pyiutilities.floatDataFromHandle(ptr)
floatDataFromHandle = _pyiutilities.floatDataFromHandle

def floatDataItemFromHandle(ptr, i):
    return _pyiutilities.floatDataItemFromHandle(ptr, i)
floatDataItemFromHandle = _pyiutilities.floatDataItemFromHandle

def floatReDataFromHandle(ptr):
    return _pyiutilities.floatReDataFromHandle(ptr)
floatReDataFromHandle = _pyiutilities.floatReDataFromHandle

def floatImDataFromHandle(ptr):
    return _pyiutilities.floatImDataFromHandle(ptr)
floatImDataFromHandle = _pyiutilities.floatImDataFromHandle

def doubleDataFromHandle(ptr):
    return _pyiutilities.doubleDataFromHandle(ptr)
doubleDataFromHandle = _pyiutilities.doubleDataFromHandle

def doubleReDataFromHandle(ptr):
    return _pyiutilities.doubleReDataFromHandle(ptr)
doubleReDataFromHandle = _pyiutilities.doubleReDataFromHandle

def doubleImDataFromHandle(ptr):
    return _pyiutilities.doubleImDataFromHandle(ptr)
doubleImDataFromHandle = _pyiutilities.doubleImDataFromHandle

def executionStatus(ptr):
    return _pyiutilities.executionStatus(ptr)
executionStatus = _pyiutilities.executionStatus

def executionError(ptr):
    return _pyiutilities.executionError(ptr)
executionError = _pyiutilities.executionError

def executionErrorFile(ptr):
    return _pyiutilities.executionErrorFile(ptr)
executionErrorFile = _pyiutilities.executionErrorFile

def executionErrorLine(ptr):
    return _pyiutilities.executionErrorLine(ptr)
executionErrorLine = _pyiutilities.executionErrorLine
# This file is compatible with both classic and new-style classes.


