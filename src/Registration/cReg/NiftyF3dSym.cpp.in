/*
CCP PETMR Synergistic Image Reconstruction Framework (SIRF)
Copyright 2017 - 2019 University College London

This is software developed for the Collaborative Computational
Project in Positron Emission Tomography and Magnetic Resonance imaging
(http://www.ccppetmr.ac.uk/).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

/*!
\file
\ingroup Registration
\brief NiftyReg's f3d class for non-rigid registrations.

\author Richard Brown
\author CCP PETMR
*/

#include "sirf/cReg/NiftyF3dSym.h"
#include "sirf/cReg/Parser.h"
#include "sirf/cReg/AffineTransformation.h"
#include "sirf/cReg/NiftiImageData3D.h"
#include "sirf/cReg/NiftiImageData3DDisplacement.h"
#include <_reg_f3d_sym.h>

using namespace sirf;

template<class dataType>
void NiftyF3dSym<dataType>::process()
{
    // Check the paramters that are NOT set via the parameter file have been set.
    this->check_parameters();

    // Convert the input images from ImageData to NiftiImageData3D
    this->set_up_inputs();

    // Annoyingly NiftyReg doesn't mark ref and floating images as const, so need to copy (could do a naughty cast, but not going to do that!)
    NiftiImageData3D<dataType> ref = *this->_reference_image_nifti_sptr;
    NiftiImageData3D<dataType> flo = *this->_floating_image_nifti_sptr;

    // Create the registration object
    _registration_sptr = std::shared_ptr<reg_f3d_sym<dataType> >(new reg_f3d_sym<dataType>(_reference_time_point, _floating_time_point));
    _registration_sptr->SetFloatingImage(ref.get_raw_nifti_sptr().get());
    _registration_sptr->SetReferenceImage(flo.get_raw_nifti_sptr().get());

    // If there is an initial transformation matrix, set it
    if (_initial_transformation_sptr) {
        mat44 init_tm = _initial_transformation_sptr->get_as_mat44();
        _registration_sptr->SetAffineTransformation(&init_tm);
    }

    // Set masks (if present). Again, need to copy to get rid of const
    if (this->_reference_mask_nifti_sptr && this->_reference_mask_nifti_sptr->is_initialised()) {
        NiftiImageData3D<dataType> ref_mask = *this->_reference_mask_nifti_sptr;
        _registration_sptr->SetReferenceMask(ref_mask.get_raw_nifti_sptr().get());
    }
    if (this->_floating_mask_nifti_sptr && this->_floating_mask_nifti_sptr->is_initialised()) {
        NiftiImageData3D<dataType> flo_mask = *this->_floating_mask_sptr;
        _registration_sptr->SetFloatingMask(flo_mask.get_raw_nifti_sptr().get());
    }

    // Parse parameter file
    this->parse_parameter_file();

    // Set any extra parameters
    this->set_parameters();

    std::cout << "\n\nStarting registration...\n\n";

    // Run
    _registration_sptr->Run();

    // Get the warped image
    nifti_image *warped_im = *_registration_sptr->GetWarpedImage();
    this->_warped_image_nifti_sptr = std::make_shared<NiftiImageData3D<dataType> >(*warped_im);
    nifti_image_free(warped_im);

    // For some reason, dt & pixdim[4] are sometimes set to 1
    if (this->_floating_image_nifti_sptr->get_raw_nifti_sptr()->dt < 1.e-7F &&
            this->_reference_image_nifti_sptr->get_raw_nifti_sptr()->dt < 1.e-7F)
        this->_warped_image_nifti_sptr->get_raw_nifti_sptr()->pixdim[4] = this->_warped_image_nifti_sptr->get_raw_nifti_sptr()->dt = 0.F;

    // Get the CPP images
    NiftiImageData3DTensor<dataType> cpp_forward(*_registration_sptr->GetControlPointPositionImage());
    NiftiImageData3DTensor<dataType> cpp_inverse(*_registration_sptr->GetBackwardControlPointPositionImage());

    // Get deformation fields from cpp
    NiftiImageData3DDeformation<dataType> def_fwd, def_inv;
    def_fwd.create_from_cpp(cpp_forward, ref);
    def_inv.create_from_cpp(cpp_inverse, ref);

    // Get the displacement fields from the def
    this->_disp_image_forward_sptr = std::make_shared<NiftiImageData3DDisplacement<dataType> >(def_fwd);
    this->_disp_image_inverse_sptr = std::make_shared<NiftiImageData3DDisplacement<dataType> >(def_inv);

    // The output should be a clone of the reference image, with data filled in from the nifti image
    this->_warped_image_sptr = this->_reference_image_sptr->clone();
    this->_warped_image_sptr->fill(*this->_warped_image_nifti_sptr);

    std::cout << "\n\nRegistration finished!\n\n";
}

template<class dataType>
void NiftyF3dSym<dataType>::check_parameters() const
{
    Registration<dataType>::check_parameters();

    // If anything is missing
    if (_floating_time_point == -1) {
        throw std::runtime_error("Floating time point has not been set."); }
    if (_reference_time_point == -1) {
        throw std::runtime_error("Reference time point has not been set."); }
}

template<class dataType>
void NiftyF3dSym<dataType>::parse_parameter_file()
{
    if (this->_parameter_filename.empty())
        return;

    Parser<reg_f3d_sym<dataType> > parser;
    parser.set_object   (    _registration_sptr     );
    parser.set_filename ( this->_parameter_filename );

${NR_f3d_parser_methods}
    parser.parse();
}
template<class dataType>
void NiftyF3dSym<dataType>::set_parameters()
{
    for (size_t i=0; i<this->_extra_params.size(); i+=3) {

        std::string par  = this->_extra_params[ i ];
        std::string arg1 = this->_extra_params[i+1];
        std::string arg2 = this->_extra_params[i+2];

${NR_f3d_runtime_methods}
        else
            throw std::runtime_error("\nUnknown argument: " + par);
    }
}

namespace sirf {
template class NiftyF3dSym<float>;
}
